name: Release Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: extension/package-lock.json
      
      - name: Install dependencies
        working-directory: extension
        run: npm ci
      
      - name: Build extension
        working-directory: extension
        run: npm run build
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create release archive
        run: |
          cd extension/dist
          zip -r ../../animestars-kodik-optimizer-v${{ steps.get_version.outputs.VERSION }}.zip ./*
      
      - name: Generate release notes
        id: release_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ CHANGELOG.md
            awk '/^## \['"${{ steps.get_version.outputs.VERSION }}"'\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md > release_notes.txt
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            cat release_notes.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "notes=Release v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: AnimeStars Kodik Optimizer v${{ steps.get_version.outputs.VERSION }}
          body: |
            ## üöÄ AnimeStars Kodik Optimizer v${{ steps.get_version.outputs.VERSION }}
            
            ${{ steps.release_notes.outputs.notes }}
            
            ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞
            1. –°–∫–∞—á–∞–π—Ç–µ `animestars-kodik-optimizer-v${{ steps.get_version.outputs.VERSION }}.zip`
            2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤
            3. –û—Ç–∫—Ä–æ–π—Ç–µ Chrome ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            4. –í–∫–ª—é—á–∏—Ç–µ "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
            5. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"
            6. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            
            ## üéØ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            - Chrome 88+
            - Microsoft Edge 88+
            - –î—Ä—É–≥–∏–µ Chromium-–±—Ä–∞—É–∑–µ—Ä—ã
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./animestars-kodik-optimizer-v${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: animestars-kodik-optimizer-v${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
