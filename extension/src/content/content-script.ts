// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π content script –¥–ª—è AnimStars Kodik optimization
// –ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–µ–≤–æ–¥—ã, —É–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä, —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π HLS –ø–ª–µ–µ—Ä

import { kodikAPI } from '../api/kodik-client';
import { ProgressManager } from '../utils/progress-manager';
import { AnimeParser } from '../utils/anime-parser';
import { AnimeInfo } from '../types/progress';

// Declare HLS.js types
declare global {
  interface Window {
    Hls: any;
  }
}

interface Translation {
  title: string;
  kodikUrl: string;
  translationId: string;
  mediaId: string;
  mediaHash: string;
}

interface Episode {
  number: number;
  title?: string;
  url?: string;
}

class AnimeStarsKodikOptimizer {
  private translations: Translation[] = [];
  private episodes: Episode[] = [];
  private currentTranslation: Translation | null = null;
  private currentEpisode: number = 1;
  private videoElement: HTMLVideoElement | null = null;
  private hlsPlayer: any = null;
  private playerContainer: HTMLElement | null = null;
  private loadingOverlay: HTMLElement | null = null;
  private centerPlayButton: HTMLElement | null = null;
  private customControls: HTMLElement | null = null;
  private progressBar: HTMLElement | null = null;
  private volumeSlider: HTMLInputElement | null = null;
  private bufferedBar: HTMLElement | null = null;
  private isControlsVisible: boolean = true;
  private controlsHideTimeout: number | null = null;
  private fullscreenClickHandler: ((e: MouseEvent) => void) | null = null;
  private fullscreenMouseMoveHandler: (() => void) | null = null;
  
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  private currentAnimeInfo: AnimeInfo | null = null;
  private isProgressSystemActive: boolean = false;
  private isFirstLoad: boolean = true; // –§–ª–∞–≥ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
   */
  async init() {
    console.log('üöÄ AnimeStars Kodik Optimizer starting...');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await this.waitForPageReady();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    await this.start();
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  private async waitForPageReady(): Promise<void> {
    console.log('‚è≥ Checking page readiness...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const requiredSelectors = [
      '.b-translators__list',
      '#translators-list', 
      '.pmovie__player',
      '.tabs-block__content'
    ];
    
    let retries = 0;
    const maxRetries = 30; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    
    while (retries < maxRetries) {
      const foundElements = requiredSelectors.filter(selector => document.querySelector(selector));
      
      if (foundElements.length > 0) {
        console.log('‚úÖ Found page elements:', foundElements);
        break;
      }
      
      console.log(`‚è≥ Waiting for page elements... (attempt ${retries + 1}/${maxRetries})`);
      await new Promise(resolve => setTimeout(resolve, 1000));
      retries++;
    }
    
    if (retries >= maxRetries) {
      console.log('‚ö†Ô∏è Timeout waiting for page elements, proceeding anyway...');
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
   */
  private async start() {
    try {
      // 1. –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ DOM
      this.parseTranslations();
      
      if (this.translations.length === 0) {
        console.log('‚ùå No translations found');
        return;
      }

      // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ
      this.extractAnimeInfo();

      // 3. –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä
      this.removeOriginalPlayer();

      // 4. –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π –ø–ª–µ–µ—Ä
      await this.createCustomPlayer();

      console.log('‚úÖ AnimeStars Kodik Optimizer initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize optimizer:', error);
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  private extractAnimeInfo() {
    console.log('üîç Extracting anime info from page data...');
    
    if (!this.currentTranslation) {
      console.warn('‚ö†Ô∏è No current translation available');
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º mediaId –∫–∞–∫ ID –∞–Ω–∏–º–µ (—ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç Kodik)
    const animeId = this.currentTranslation.mediaId;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
    let title = document.title;
    
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–µ–≥–æ
    title = title
      .replace(/\s*-\s*—Å–º–æ—Ç—Ä–µ—Ç—å.*$/i, '')
      .replace(/\s*-\s*–∞–Ω–∏–º–µ.*$/i, '')
      .replace(/\s*\|\s*.*$/i, '')
      .replace(/\s*\(\d{4}\).*$/, '')
      .trim();

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (!title || title.length < 3) {
      const titleElement = document.querySelector('h1, .anime-title, .title');
      if (titleElement) {
        title = titleElement.textContent?.trim() || 'Unknown Anime';
      }
    }

    this.currentAnimeInfo = {
      id: animeId,
      title: title || 'Unknown Anime',
      currentEpisode: this.currentEpisode,
      totalEpisodes: this.episodes.length > 0 ? this.episodes.length : undefined,
      translationId: this.currentTranslation.translationId,
      url: window.location.href
    };

    console.log('üì∫ Extracted anime info:', this.currentAnimeInfo);
    this.isProgressSystemActive = true;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ DOM —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  private parseTranslations() {
    console.log('üîç Parsing translations from page...');

    const translatorsList = document.querySelector('#translators-list, .b-translators__list');
    if (!translatorsList) {
      console.warn('‚ö†Ô∏è Translators list not found');
      return;
    }

    const translatorItems = translatorsList.querySelectorAll('.b-translator__item, li[data-this_link]');
    
    for (let i = 0; i < translatorItems.length; i++) {
      const item = translatorItems[i];
      const link = item.getAttribute('data-this_link');
      const title = item.textContent?.trim() || 'Unknown';
      
      if (link) {
        // –ü–∞—Ä—Å–∏–º Kodik URL
        const urlMatch = link.match(/\/serial\/(\d+)\/([a-f0-9]+)\/720p/);
        if (urlMatch) {
          const mediaId = urlMatch[1];
          const mediaHash = urlMatch[2];
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º translation ID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          const urlParams = new URLSearchParams(link.split('?')[1] || '');
          const translationId = urlParams.get('only_translations') || '0';
          
          const translation: Translation = {
            title,
            kodikUrl: link.startsWith('//') ? 'https:' + link : link,
            translationId,
            mediaId,
            mediaHash
          };
          
          this.translations.push(translation);
          console.log('üé≠ Found translation:', title, translation);
        }
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    const activeItem = translatorsList.querySelector('.active, .b-translator__item.active');
    if (activeItem) {
      const activeLink = activeItem.getAttribute('data-this_link');
      this.currentTranslation = this.translations.find(t => t.kodikUrl.includes(activeLink || '')) || this.translations[0];
    } else {
      this.currentTranslation = this.translations[0];
    }

    console.log('üìã Parsed translations:', this.translations.length);
    console.log('üéØ Current translation:', this.currentTranslation?.title);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –ø–ª–µ–µ—Ä–∞
   */
  private removeOriginalPlayer() {
    console.log('üóëÔ∏è Removing original player...');

    // –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–ª–µ–µ—Ä–∞
    const playerSelectors = [
      '.room__player',
      '.player-container',
      '.video-player',
      '#player',
      '.kodik-player',
      'iframe[src*="kodik"]'
    ];

    for (const selector of playerSelectors) {
      const elements = document.querySelectorAll(selector);
      elements.forEach(element => {
        console.log('üóëÔ∏è Removing element:', selector);
        element.remove();
      });
    }

    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏ Kodik
    const kodikScripts = document.querySelectorAll('script[src*="kodik"]');
    kodikScripts.forEach(script => script.remove());
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–µ–µ—Ä
   */
  private async createCustomPlayer() {
    console.log('üéÆ Creating custom player...');

    if (!this.currentTranslation) {
      throw new Error('No translation selected');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–µ–µ—Ä–∞
    this.createPlayerContainer();

    // –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    this.createTranslationSelector();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    await this.loadEpisodes();

    // –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ø–∏–∑–æ–¥–æ–≤
    this.createEpisodeSelector();

    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä
    await this.createVideoPlayer();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–µ–µ—Ä–∞
   */
  private createPlayerContainer() {
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–ª–µ–µ—Ä–∞ - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä #player –∏–ª–∏ #kodik-tab-player
    let targetContainer = document.querySelector('#player, #kodik-tab-player, .video-inside');
    
    if (!targetContainer) {
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–µ–µ—Ä–∞
      targetContainer = document.querySelector('.tabs-block__content, .pmovie__player');
    }
    
    if (!targetContainer) {
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
      const content = document.querySelector('.content, .main-content, body');
      if (content) {
        targetContainer = document.createElement('div');
        targetContainer.className = 'animestars-player-container';
        content.insertBefore(targetContainer, content.firstChild);
      }
    }

    if (!targetContainer) {
      throw new Error('Could not find place for player');
    }

    console.log('üéØ Found target container:', targetContainer);

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—à –ø–ª–µ–µ—Ä
    targetContainer.innerHTML = '';
    targetContainer.className = targetContainer.className + ' animestars-custom-player';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
    (targetContainer as HTMLElement).style.cssText = `
      width: 100%;
      max-width: 1000px;
      margin: 0 auto;
      background: #000;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    `;

    this.playerContainer = targetContainer as HTMLElement;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  private createTranslationSelector() {
    if (!this.playerContainer) return;

    const translationBar = document.createElement('div');
    translationBar.className = 'translation-selector';
    translationBar.style.cssText = `
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      padding: 12px;
      background: #1a1a1a;
      border-bottom: 1px solid #333;
    `;

    this.translations.forEach((translation, index) => {
      const button = document.createElement('button');
      button.textContent = translation.title;
      button.className = 'translation-btn';
      button.style.cssText = `
        padding: 8px 12px;
        background: ${this.currentTranslation === translation ? '#007bff' : '#333'};
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        transition: background 0.2s;
      `;

      if (button) {
        button.addEventListener('click', () => {
          this.switchTranslation(translation);
        });
      }

      translationBar.appendChild(button);
    });

    this.playerContainer.appendChild(translationBar);
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
   */
  private async loadEpisodes() {
    if (!this.currentTranslation) return;

    console.log('üì∫ Loading episodes for:', this.currentTranslation.title);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –∏–∑ Kodik
      const response = await this.fetchViaBackground(this.currentTranslation.kodikUrl);
      if (!response.success) {
        throw new Error('Failed to fetch episode data');
      }

      const html = response.data;
      if (!html) {
        throw new Error('Empty HTML response');
      }
      
      this.episodes = [];

      // –ò—â–µ–º –≤ HTML –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –∏–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–µ—Ä–∏–π
      console.log('üîç Searching for episodes in HTML...');
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω 1: data-episode="X"
      const episodeMatches = html.match(/data-episode="(\d+)"/g);
      console.log('üîç data-episode matches:', episodeMatches);
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω 2: episode=X –≤ URL –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
      const urlEpisodeMatches = html.match(/episode=(\d+)/g);
      console.log('üîç URL episode matches:', urlEpisodeMatches);
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –°–µ–ª–µ–∫—Ç–æ—Ä—ã —Å–µ—Ä–∏–π –≤ select options
      const selectEpisodeMatches = html.match(/<option[^>]*value="(\d+)"[^>]*>(\d+)/g);
      console.log('üîç Select option matches:', selectEpisodeMatches);
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ö–Ω–æ–ø–∫–∏ —Å–µ—Ä–∏–π
      const buttonEpisodeMatches = html.match(/data-season-episode="(\d+)"/g);
      console.log('üîç Button episode matches:', buttonEpisodeMatches);
      
      let maxEpisode = 0;
      
      if (episodeMatches && episodeMatches.length > 0) {
        const episodeNumbers = episodeMatches.map((match: string) => {
          const numberMatch = match.match(/data-episode="(\d+)"/);
          return numberMatch ? parseInt(numberMatch[1]) : 0;
        });
        maxEpisode = Math.max(...episodeNumbers);
        console.log('üì∫ Found max episode from data-episode:', maxEpisode);
      } else if (urlEpisodeMatches && urlEpisodeMatches.length > 0) {
        const episodeNumbers = urlEpisodeMatches.map((match: string) => {
          const numberMatch = match.match(/episode=(\d+)/);
          return numberMatch ? parseInt(numberMatch[1]) : 0;
        });
        maxEpisode = Math.max(...episodeNumbers);
        console.log('üì∫ Found max episode from URL params:', maxEpisode);
      } else if (selectEpisodeMatches && selectEpisodeMatches.length > 0) {
        const episodeNumbers = selectEpisodeMatches.map((match: string) => {
          const numberMatch = match.match(/value="(\d+)"/);
          return numberMatch ? parseInt(numberMatch[1]) : 0;
        });
        maxEpisode = Math.max(...episodeNumbers);
        console.log('üì∫ Found max episode from select options:', maxEpisode);
      } else if (buttonEpisodeMatches && buttonEpisodeMatches.length > 0) {
        const episodeNumbers = buttonEpisodeMatches.map((match: string) => {
          const numberMatch = match.match(/data-season-episode="(\d+)"/);
          return numberMatch ? parseInt(numberMatch[1]) : 0;
        });
        maxEpisode = Math.max(...episodeNumbers);
        console.log('üì∫ Found max episode from button episodes:', maxEpisode);
      }
      
      if (maxEpisode > 0) {
        console.log('üì∫ Using detected episode count:', maxEpisode);
        for (let i = 1; i <= maxEpisode; i++) {
          this.episodes.push({
            number: i,
            title: `–°–µ—Ä–∏—è ${i}`
          });
        }
      } else {
        // Fallback: –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–∏–π
        const seasonInfoMatch = html.match(/—Å–µ—Ä–∏—è[^\d]*(\d+)/i) || html.match(/episode[^\d]*(\d+)/i);
        const episodeCount = seasonInfoMatch ? parseInt(seasonInfoMatch[1]) : 1;
        
        console.log('üì∫ Using fallback episode count:', episodeCount);
        
        for (let i = 1; i <= episodeCount; i++) {
          this.episodes.push({
            number: i,
            title: `–°–µ—Ä–∏—è ${i}`
          });
        }
      }

      console.log('üì∫ Created episodes:', this.episodes.length);
    } catch (error) {
      console.error('‚ùå Failed to load episodes:', error);
      // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–µ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      this.episodes = [{ number: 1, title: '–°–µ—Ä–∏—è 1' }];
      console.log('üì∫ Using single default episode');
    }
    
    console.log('üì∫ Final episodes array:', this.episodes);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ø–∏–∑–æ–¥–æ–≤
   */
  private createEpisodeSelector() {
    console.log('üé¨ Creating episode selector. Episodes count:', this.episodes.length);
    console.log('üé¨ Episodes:', this.episodes);
    
    if (!this.playerContainer) {
      console.log('‚ùå No player container for episode selector');
      return;
    }
    
    if (this.episodes.length <= 1) {
      console.log('‚ö†Ô∏è Only 1 or 0 episodes, skipping episode selector');
      return;
    }

    const episodeBar = document.createElement('div');
    episodeBar.className = 'episode-selector';
    episodeBar.style.cssText = `
      display: flex;
      flex-wrap: wrap;
      gap: 4px;
      padding: 8px 12px;
      background: #2a2a2a;
      border-bottom: 1px solid #333;
      max-height: 150px;
      overflow-y: auto;
    `;

    this.episodes.forEach(episode => {
      const button = document.createElement('button');
      button.textContent = episode.number.toString();
      button.title = episode.title || `–≠–ø–∏–∑–æ–¥ ${episode.number}`;
      button.className = 'episode-btn';
      button.style.cssText = `
        width: 40px;
        height: 40px;
        background: ${this.currentEpisode === episode.number ? '#007bff' : '#444'};
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        font-weight: bold;
        transition: background 0.2s;
      `;

      if (button) {
        button.addEventListener('click', () => {
          this.switchEpisode(episode.number);
        });
      }

      episodeBar.appendChild(button);
    });

    this.playerContainer.appendChild(episodeBar);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä
   */
  private async createVideoPlayer() {
    if (!this.playerContainer || !this.currentTranslation) return;

    console.log('üé¨ Creating video player...');

    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–µ–µ—Ä–∞
    const playerWrapper = document.createElement('div');
    playerWrapper.className = 'animestars-player-wrapper';
    playerWrapper.style.cssText = `
      position: relative;
      background: linear-gradient(135deg, #0f0f0f 0%, #1a1a1a 100%);
      aspect-ratio: 16/9;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 8px 25px rgba(0,0,0,0.4);
      cursor: pointer;
    `;

    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
    this.videoElement = document.createElement('video');
    this.videoElement.style.cssText = `
      width: 100%;
      height: 100%;
      object-fit: contain;
      border-radius: 12px;
    `;
    this.videoElement.controls = false;
    this.videoElement.preload = 'metadata';
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π poster —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∏–º–µ
    await this.createVideoPoster();

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    this.createLoadingIndicator(playerWrapper);

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
    this.createCustomControls(playerWrapper);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    this.createCenterPlayButton(playerWrapper);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    playerWrapper.appendChild(this.videoElement);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupVideoEvents();
    this.setupKeyboardControls();
    this.setupMouseControls(playerWrapper);

    this.playerContainer.appendChild(playerWrapper);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
    await this.loadVideo();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π poster –¥–ª—è –≤–∏–¥–µ–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∏–º–µ
   */
  private async createVideoPoster() {
    if (!this.videoElement || !this.currentAnimeInfo) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π poster
      this.videoElement!.poster = this.createDefaultPoster();
      return;
    }

    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é –æ—Ç Kodik
      const kodikPoster = await this.tryGetKodikPoster();
      
      if (kodikPoster) {
        this.videoElement.poster = kodikPoster;
        console.log('‚úÖ Using Kodik poster');
        return;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Could not get Kodik poster, using custom poster');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π poster —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∏–º–µ
    const customPoster = await this.createCustomPoster();
    this.videoElement.poster = customPoster;
  }

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é –æ—Ç Kodik
   */
  private async tryGetKodikPoster(): Promise<string | null> {
    if (!this.currentTranslation) return null;

    try {
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–µ–≤—å—é –≤ –¥–∞–Ω–Ω—ã—Ö Kodik
      const episodeUrl = `https://kodik.info/serial/${this.currentTranslation.mediaId}/${this.currentTranslation.mediaHash}/720p?min_age=16&first_url=false&season=1&episode=${this.currentEpisode}`;
      
      const response = await this.fetchViaBackground(episodeUrl);
      if (!response.success || !response.data) return null;

      const html = response.data;
      
      // –ò—â–µ–º poster –≤ HTML
      const posterPatterns = [
        /poster['"]\s*:\s*['"]([^'"]+)['"]/i,
        /data-poster['"]\s*=\s*['"]([^'"]+)['"]/i,
        /<video[^>]+poster\s*=\s*['"]([^'"]+)['"]/i,
        /preview['"]\s*:\s*['"]([^'"]+)['"]/i,
        /thumbnail['"]\s*:\s*['"]([^'"]+)['"]/i
      ];

      for (const pattern of posterPatterns) {
        const match = html.match(pattern);
        if (match && match[1]) {
          let posterUrl = match[1];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
          if (posterUrl.startsWith('http')) {
            return posterUrl;
          } else if (posterUrl.startsWith('/')) {
            return `https://kodik.info${posterUrl}`;
          }
        }
      }

      return null;
    } catch (error) {
      console.log('‚ùå Error getting Kodik poster:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π poster —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∏–º–µ
   */
  private async createCustomPoster(): Promise<string> {
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 450;
    const ctx = canvas.getContext('2d')!;

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, '#1a1a2e');
    gradient.addColorStop(0.5, '#16213e');
    gradient.addColorStop(1, '#0f3460');
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
    ctx.fillStyle = 'rgba(255, 255, 255, 0.03)';
    for (let i = 0; i < 50; i++) {
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      const size = Math.random() * 3 + 1;
      ctx.fillRect(x, y, size, size);
    }

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const iconSize = 80;

    // –¢–µ–Ω—å –¥–ª—è –∏–∫–æ–Ω–∫–∏
    ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
    ctx.beginPath();
    ctx.arc(centerX + 3, centerY + 3, iconSize / 2, 0, 2 * Math.PI);
    ctx.fill();

    // –§–æ–Ω –∏–∫–æ–Ω–∫–∏
    ctx.fillStyle = 'rgba(0, 212, 255, 0.2)';
    ctx.beginPath();
    ctx.arc(centerX, centerY, iconSize / 2, 0, 2 * Math.PI);
    ctx.fill();

    // –û–±–≤–æ–¥–∫–∞ –∏–∫–æ–Ω–∫–∏
    ctx.strokeStyle = 'rgba(0, 212, 255, 0.8)';
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.arc(centerX, centerY, iconSize / 2, 0, 2 * Math.PI);
    ctx.stroke();

    // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    ctx.fillStyle = '#00d4ff';
    ctx.beginPath();
    ctx.moveTo(centerX - 15, centerY - 20);
    ctx.lineTo(centerX - 15, centerY + 20);
    ctx.lineTo(centerX + 20, centerY);
    ctx.closePath();
    ctx.fill();

    // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ
    if (this.currentAnimeInfo?.title) {
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 32px -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      
      // –¢–µ–Ω—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
      ctx.fillText(this.currentAnimeInfo.title, centerX + 2, centerY - 82);
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
      ctx.fillStyle = '#ffffff';
      ctx.fillText(this.currentAnimeInfo.title, centerX, centerY - 80);
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–µ
    const episodeText = `–°–µ—Ä–∏—è ${this.currentEpisode}`;
    const translationText = this.currentTranslation?.title || '–û–∑–≤—É—á–∫–∞';
    
    ctx.font = '20px -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif';
    
    // –¢–µ–Ω—å
    ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
    ctx.fillText(episodeText, centerX + 1, centerY + 101);
    ctx.fillText(translationText, centerX + 1, centerY + 131);
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
    ctx.fillText(episodeText, centerX, centerY + 100);
    
    ctx.fillStyle = 'rgba(0, 212, 255, 0.9)';
    ctx.fillText(translationText, centerX, centerY + 130);

    // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É–≥–ª–∞–º
    this.drawCornerDecorations(ctx, canvas.width, canvas.height);

    return canvas.toDataURL('image/png', 0.9);
  }

  /**
   * –†–∏—Å—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É–≥–ª–∞–º poster'–∞
   */
  private drawCornerDecorations(ctx: CanvasRenderingContext2D, width: number, height: number) {
    const cornerSize = 40;
    const lineWidth = 3;
    
    ctx.strokeStyle = 'rgba(0, 212, 255, 0.4)';
    ctx.lineWidth = lineWidth;
    
    // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    ctx.beginPath();
    ctx.moveTo(20, 20 + cornerSize);
    ctx.lineTo(20, 20);
    ctx.lineTo(20 + cornerSize, 20);
    ctx.stroke();
    
    // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    ctx.beginPath();
    ctx.moveTo(width - 20 - cornerSize, 20);
    ctx.lineTo(width - 20, 20);
    ctx.lineTo(width - 20, 20 + cornerSize);
    ctx.stroke();
    
    // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    ctx.beginPath();
    ctx.moveTo(20, height - 20 - cornerSize);
    ctx.lineTo(20, height - 20);
    ctx.lineTo(20 + cornerSize, height - 20);
    ctx.stroke();
    
    // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    ctx.beginPath();
    ctx.moveTo(width - 20 - cornerSize, height - 20);
    ctx.lineTo(width - 20, height - 20);
    ctx.lineTo(width - 20, height - 20 - cornerSize);
    ctx.stroke();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π poster
   */
  private createDefaultPoster(): string {
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 450;
    const ctx = canvas.getContext('2d')!;

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, '#232323');
    gradient.addColorStop(1, '#111111');
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    
    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
    ctx.beginPath();
    ctx.arc(centerX, centerY, 50, 0, 2 * Math.PI);
    ctx.fill();
    
    ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
    ctx.beginPath();
    ctx.moveTo(centerX - 15, centerY - 20);
    ctx.lineTo(centerX - 15, centerY + 20);
    ctx.lineTo(centerX + 20, centerY);
    ctx.closePath();
    ctx.fill();

    return canvas.toDataURL('image/png', 0.8);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private createLoadingIndicator(container: HTMLElement) {
    const loadingOverlay = document.createElement('div');
    loadingOverlay.className = 'loading-overlay';
    loadingOverlay.style.cssText = `
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 100;
      transition: opacity 0.4s ease;
      backdrop-filter: blur(10px);
    `;

    const spinner = document.createElement('div');
    spinner.style.cssText = `
      width: 60px;
      height: 60px;
      border: 4px solid rgba(255,255,255,0.2);
      border-top: 4px solid #00d4ff;
      border-radius: 50%;
      animation: spin 1.2s linear infinite;
      margin-bottom: 20px;
      box-shadow: 0 0 20px rgba(0,212,255,0.3);
    `;

    const loadingText = document.createElement('div');
    loadingText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...';
    loadingText.style.cssText = `
      color: white;
      font-size: 16px;
      font-weight: 600;
      text-shadow: 0 2px 4px rgba(0,0,0,0.5);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
    if (!document.querySelector('#animestars-animations')) {
      const style = document.createElement('style');
      style.id = 'animestars-animations';
      style.textContent = `
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        @keyframes fadeIn {
          from { opacity: 0; transform: scale(0.9); }
          to { opacity: 1; transform: scale(1); }
        }
        @keyframes slideUp {
          from { transform: translateY(10px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
      `;
      document.head.appendChild(style);
    }

    loadingOverlay.appendChild(spinner);
    loadingOverlay.appendChild(loadingText);
    container.appendChild(loadingOverlay);

    this.loadingOverlay = loadingOverlay;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private createCenterPlayButton(container: HTMLElement) {
    const centerButton = document.createElement('div');
    centerButton.className = 'center-play-button';
    centerButton.style.cssText = `
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 90px;
      height: 90px;
      background: rgba(0,0,0,0.8);
      border: 3px solid rgba(255,255,255,0.9);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      z-index: 50;
      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 32px rgba(0,0,0,0.4);
    `;

    centerButton.innerHTML = `
      <svg width="36" height="36" viewBox="0 0 24 24" fill="white">
        <path d="M8 5v14l11-7z"/>
      </svg>
    `;

    centerButton.addEventListener('mouseenter', () => {
      centerButton.style.transform = 'translate(-50%, -50%) scale(1.1)';
      centerButton.style.background = 'rgba(0,123,255,0.9)';
      centerButton.style.borderColor = 'rgba(0,123,255,1)';
      centerButton.style.boxShadow = '0 12px 40px rgba(0,123,255,0.4)';
    });

    centerButton.addEventListener('mouseleave', () => {
      centerButton.style.transform = 'translate(-50%, -50%) scale(1)';
      centerButton.style.background = 'rgba(0,0,0,0.8)';
      centerButton.style.borderColor = 'rgba(255,255,255,0.9)';
      centerButton.style.boxShadow = '0 8px 32px rgba(0,0,0,0.4)';
    });

    centerButton.addEventListener('mousedown', () => {
      centerButton.style.transform = 'translate(-50%, -50%) scale(0.95)';
    });

    centerButton.addEventListener('mouseup', () => {
      centerButton.style.transform = 'translate(-50%, -50%) scale(1.1)';
    });

    centerButton.addEventListener('click', (e) => {
      console.log('üé¨ Center play button clicked - event target:', e.target);
      console.log('üé¨ Video element paused state:', this.videoElement?.paused);
      e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
      e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      this.togglePlayPause();
    });

    container.appendChild(centerButton);
    this.centerPlayButton = centerButton;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–ª–µ–µ—Ä–∞
   */
  private createCustomControls(container: HTMLElement) {
    const controlsBar = document.createElement('div');
    controlsBar.className = 'custom-controls';
    controlsBar.style.cssText = `
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, rgba(0,0,0,0.9));
      padding: 30px 20px 20px;
      transform: translateY(0);
      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      z-index: 60;
      backdrop-filter: blur(10px);
    `;

    // –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressContainer = document.createElement('div');
    progressContainer.style.cssText = `
      width: 100%;
      height: 8px;
      background: rgba(255,255,255,0.2);
      border-radius: 4px;
      margin-bottom: 16px;
      cursor: pointer;
      position: relative;
      box-shadow: inset 0 1px 3px rgba(0,0,0,0.3);
    `;

    const progressBar = document.createElement('div');
    progressBar.style.cssText = `
      height: 100%;
      background: linear-gradient(90deg, #00d4ff, #007bff);
      border-radius: 4px;
      width: 0%;
      transition: width 0.2s ease;
      box-shadow: 0 2px 8px rgba(0,123,255,0.3);
    `;

    const bufferedBar = document.createElement('div');
    bufferedBar.className = 'buffered-bar';
    bufferedBar.style.cssText = `
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      background: rgba(255,255,255,0.3);
      border-radius: 4px;
      width: 0%;
    `;

    progressContainer.appendChild(bufferedBar);
    progressContainer.appendChild(progressBar);

    // –ö–æ–Ω—Ç—Ä–æ–ª—ã
    const controlsRow = document.createElement('div');
    controlsRow.style.cssText = `
      display: flex;
      align-items: center;
      gap: 16px;
      color: white;
    `;

    // –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const playButton = this.createControlButton('play', `
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M8 5v14l11-7z"/>
      </svg>
    `);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
    const timeInfo = document.createElement('span');
    timeInfo.style.cssText = `
      font-size: 14px;
      font-weight: 600;
      min-width: 110px;
      text-shadow: 0 1px 2px rgba(0,0,0,0.5);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    `;
    timeInfo.textContent = '00:00 / 00:00';

    // Spacer –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    const spacer = document.createElement('div');
    spacer.style.cssText = `flex: 1;`;

    // –ì—Ä–æ–º–∫–æ—Å—Ç—å
    const volumeContainer = document.createElement('div');
    volumeContainer.style.cssText = `
      display: flex;
      align-items: center;
      gap: 10px;
    `;

    const volumeButton = this.createControlButton('volume', `
      <svg width="22" height="22" viewBox="0 0 24 24" fill="currentColor">
        <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/>
      </svg>
    `);

    const volumeSlider = document.createElement('input');
    volumeSlider.type = 'range';
    volumeSlider.min = '0';
    volumeSlider.max = '100';
    volumeSlider.value = '100';
    volumeSlider.style.cssText = `
      width: 90px;
      height: 6px;
      background: rgba(255,255,255,0.3);
      border-radius: 3px;
      outline: none;
      cursor: pointer;
      -webkit-appearance: none;
      appearance: none;
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ —á–µ—Ä–µ–∑ CSS
    const style = document.createElement('style');
    style.textContent = `
      input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: #00d4ff;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0,212,255,0.4);
        transition: all 0.2s ease;
      }
      
      input[type="range"]::-webkit-slider-thumb:hover {
        transform: scale(1.2);
        box-shadow: 0 4px 12px rgba(0,212,255,0.6);
      }
      
      input[type="range"]::-moz-range-thumb {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: #00d4ff;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 8px rgba(0,212,255,0.4);
      }
    `;
    document.head.appendChild(style);

    // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    const fullscreenButton = this.createControlButton('fullscreen', `
      <svg width="22" height="22" viewBox="0 0 24 24" fill="currentColor">
        <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>
      </svg>
    `);

    volumeContainer.appendChild(volumeButton);
    volumeContainer.appendChild(volumeSlider);

    controlsRow.appendChild(playButton);
    controlsRow.appendChild(timeInfo);
    controlsRow.appendChild(spacer);
    controlsRow.appendChild(volumeContainer);
    controlsRow.appendChild(fullscreenButton);

    controlsBar.appendChild(progressContainer);
    controlsBar.appendChild(controlsRow);
    container.appendChild(controlsBar);

    this.customControls = controlsBar;
    this.progressBar = progressBar;
    this.volumeSlider = volumeSlider;
    this.bufferedBar = bufferedBar;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.setupControlsEvents(playButton, timeInfo, progressContainer, volumeButton, fullscreenButton);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private createControlButton(type: string, icon: string): HTMLElement {
    const button = document.createElement('button');
    button.className = `control-btn control-btn-${type}`;
    button.style.cssText = `
      background: rgba(255,255,255,0.1);
      border: none;
      color: white;
      cursor: pointer;
      padding: 12px;
      border-radius: 8px;
      transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      display: flex;
      align-items: center;
      justify-content: center;
      backdrop-filter: blur(5px);
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    `;
    button.innerHTML = icon;

    button.addEventListener('mouseenter', () => {
      button.style.background = 'rgba(255,255,255,0.2)';
      button.style.transform = 'scale(1.05)';
      button.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)';
    });

    button.addEventListener('mouseleave', () => {
      button.style.background = 'rgba(255,255,255,0.1)';
      button.style.transform = 'scale(1)';
      button.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
    });

    button.addEventListener('mousedown', () => {
      button.style.transform = 'scale(0.95)';
    });

    button.addEventListener('mouseup', () => {
      button.style.transform = 'scale(1.05)';
    });

    return button;
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private setupVideoEvents() {
    if (!this.videoElement) return;

    this.videoElement.addEventListener('loadstart', () => {
      console.log('üì∫ Video loading started');
      this.showLoading();
    });

    this.videoElement.addEventListener('canplay', () => {
      console.log('üì∫ Video can start playing');
      this.hideLoading();
      this.hideCenterPlayButton();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      this.startProgressTracking();
    });

    this.videoElement.addEventListener('waiting', () => {
      this.showLoading();
    });

    this.videoElement.addEventListener('playing', () => {
      this.hideLoading();
      this.hideCenterPlayButton();
      this.updatePlayButton(false);
    });

    this.videoElement.addEventListener('pause', () => {
      this.updatePlayButton(true);
      this.showCenterPlayButton();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –ø–∞—É–∑–µ
      this.saveCurrentProgress();
    });

    this.videoElement.addEventListener('timeupdate', () => {
      this.updateProgress();
    });

    this.videoElement.addEventListener('progress', () => {
      this.updateBuffered();
    });

    this.videoElement.addEventListener('ended', () => {
      this.showCenterPlayButton();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      this.saveCurrentProgress();
      
      // –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Ä–∏–∏
      if (this.currentEpisode < this.episodes.length) {
        setTimeout(() => this.switchEpisode(this.currentEpisode + 1), 2000);
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
      this.saveCurrentProgress();
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
   */
  private startProgressTracking() {
    if (!this.isProgressSystemActive || !this.currentAnimeInfo || !this.videoElement) {
      console.log('‚ö†Ô∏è Progress tracking not available');
      return;
    }

    console.log('üìä Starting progress tracking for:', this.currentAnimeInfo.title);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    ProgressManager.startAutoSave(this.currentAnimeInfo, this.videoElement);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
   */
  private async saveCurrentProgress() {
    if (!this.isProgressSystemActive || !this.currentAnimeInfo || !this.videoElement) {
      return;
    }

    try {
      await ProgressManager.saveProgress(
        this.currentAnimeInfo,
        this.videoElement.currentTime,
        this.videoElement.duration
      );
    } catch (error) {
      console.error('‚ùå Failed to save progress:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  private stopProgressTracking() {
    ProgressManager.stopAutoSave();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
   */
  private updateAnimeInfoForCurrentEpisode() {
    if (!this.currentAnimeInfo || !this.currentTranslation) return;

    this.currentAnimeInfo = {
      ...this.currentAnimeInfo,
      currentEpisode: this.currentEpisode,
      totalEpisodes: this.episodes.length > 0 ? this.episodes.length : undefined,
      translationId: this.currentTranslation.translationId,
      url: window.location.href
    };

    console.log('üì∫ Updated anime info for episode:', this.currentEpisode, this.currentAnimeInfo);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
   */
  private async checkAndOfferProgressResume() {
    if (!this.isProgressSystemActive || !this.currentAnimeInfo) return;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (!this.isFirstLoad) {
      console.log('üì∫ Skipping progress restore - not first load');
      return;
    }

    try {
      const resumeOptions = await ProgressManager.checkForResume(this.currentAnimeInfo);
      
      if (resumeOptions) {
        console.log('üì∫ Found saved progress, restoring automatically:', resumeOptions);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∫—É
        if (resumeOptions.translation && this.currentTranslation?.translationId !== resumeOptions.translation) {
          console.log(`üì∫ Switching to saved translation: ${resumeOptions.translation}`);
          
          // –ò—â–µ–º –Ω—É–∂–Ω—É—é –æ–∑–≤—É—á–∫—É –≤ —Å–ø–∏—Å–∫–µ
          const targetTranslation = this.translations.find(t => t.translationId === resumeOptions.translation);
          
          if (targetTranslation) {
            console.log(`üì∫ Found target translation: ${targetTranslation.title}`);
            this.currentTranslation = targetTranslation;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ–∑–≤—É—á–µ–∫
            const translationButtons = this.playerContainer?.querySelectorAll('.translation-btn');
            translationButtons?.forEach((btn, index) => {
              (btn as HTMLElement).style.background = 
                this.translations[index] === targetTranslation ? '#007bff' : '#333';
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –¥–ª—è –Ω–æ–≤–æ–π –æ–∑–≤—É—á–∫–∏
            await this.loadEpisodes();
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ø–∏–∑–æ–¥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const oldEpisodeSelector = this.playerContainer?.querySelector('.episode-selector');
            if (oldEpisodeSelector) {
              oldEpisodeSelector.remove();
              this.createEpisodeSelector();
            }
          } else {
            console.warn(`‚ö†Ô∏è Translation ${resumeOptions.translation} not found in current list`);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —ç–ø–∏–∑–æ–¥
        if (resumeOptions.episode !== this.currentEpisode) {
          console.log(`üì∫ Switching to saved episode: ${resumeOptions.episode}`);
          this.currentEpisode = resumeOptions.episode;
          this.updateAnimeInfoForCurrentEpisode();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —ç–ø–∏–∑–æ–¥–æ–≤
          const episodeButtons = this.playerContainer?.querySelectorAll('.episode-btn');
          episodeButtons?.forEach(btn => {
            const btnEpisode = parseInt(btn.textContent || '0');
            (btn as HTMLElement).style.background = 
              btnEpisode === this.currentEpisode ? '#007bff' : '#444';
          });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        ProgressManager.showResumeNotification(this.currentAnimeInfo, resumeOptions);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
        if (this.videoElement) {
          const setResumeTime = () => {
            if (this.videoElement && resumeOptions.resumeTime > 0) {
              this.videoElement.currentTime = resumeOptions.resumeTime;
              console.log(`üì∫ Resumed playback at: ${ProgressManager.formatTime(resumeOptions.resumeTime)}`);
            }
          };
          
          if (this.videoElement.readyState >= 1) {
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            setResumeTime();
          } else {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            this.videoElement.addEventListener('loadedmetadata', setResumeTime, { once: true });
          }
        }
        
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        this.isFirstLoad = false;
      } else {
        // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        this.isFirstLoad = false;
      }
    } catch (error) {
      console.error('‚ùå Failed to check progress resume:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –æ—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
      this.isFirstLoad = false;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
   */
  private setupKeyboardControls() {
    document.addEventListener('keydown', (e) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      if (!this.videoElement) return;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö (–∫—Ä–æ–º–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
      if (document.activeElement?.tagName === 'INPUT' && !document.fullscreenElement) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–µ–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω (–≤–∏–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
      const isPlayerActive = document.fullscreenElement || 
                           this.playerContainer?.offsetParent !== null;
      
      if (!isPlayerActive) return;

      switch (e.code) {
        case 'Space':
          e.preventDefault();
          this.togglePlayPause();
          break;
        case 'ArrowLeft':
          e.preventDefault();
          this.seekBy(-10);
          break;
        case 'ArrowRight':
          e.preventDefault();
          this.seekBy(10);
          break;
        case 'ArrowUp':
          e.preventDefault();
          this.adjustVolume(0.1);
          break;
        case 'ArrowDown':
          e.preventDefault();
          this.adjustVolume(-0.1);
          break;
        case 'KeyF':
          e.preventDefault();
          this.toggleFullscreen();
          break;
        case 'KeyM':
          e.preventDefault();
          this.toggleMute();
          break;
        case 'Escape':
          // –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
          if (document.fullscreenElement) {
            e.preventDefault();
            document.exitFullscreen();
          }
          break;
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
   */
  private setupMouseControls(container: HTMLElement) {
    let isMouseMoving = false;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const handleClick = (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º, input –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º
      if (target.closest('button') || 
          target.closest('input') || 
          target.closest('.custom-controls')) {
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
      if (target === this.videoElement || target === container || 
          target.closest('.video-container') === container) {
        this.togglePlayPause();
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    const handleMouseMove = () => {
      this.showControls();
      isMouseMoving = true;
      
      if (this.controlsHideTimeout) {
        clearTimeout(this.controlsHideTimeout);
      }
      
      this.controlsHideTimeout = window.setTimeout(() => {
        if (!isMouseMoving) this.hideControls();
        isMouseMoving = false;
      }, 3000);
    };

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
    container.addEventListener('click', handleClick);
    container.addEventListener('mousemove', handleMouseMove);

    container.addEventListener('mouseleave', () => {
      this.hideControls();
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    this.fullscreenClickHandler = handleClick;
    this.fullscreenMouseMoveHandler = handleMouseMove;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ document –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    document.addEventListener('fullscreenchange', () => {
      if (document.fullscreenElement) {
        // –í–æ—à–ª–∏ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        if (this.fullscreenClickHandler) {
          document.addEventListener('click', this.fullscreenClickHandler);
        }
        if (this.fullscreenMouseMoveHandler) {
          document.addEventListener('mousemove', this.fullscreenMouseMoveHandler);
        }
        console.log('üîç Fullscreen mode enabled - global controls active');
      } else {
        // –í—ã—à–ª–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (this.fullscreenClickHandler) {
          document.removeEventListener('click', this.fullscreenClickHandler);
        }
        if (this.fullscreenMouseMoveHandler) {
          document.removeEventListener('mousemove', this.fullscreenMouseMoveHandler);
        }
        this.showControls(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        console.log('üîç Fullscreen mode disabled - local controls only');
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑—É
   */
  private togglePlayPause() {
    console.log('üéµ togglePlayPause called, video element:', !!this.videoElement);
    if (!this.videoElement) {
      console.log('‚ùå No video element found');
      return;
    }

    console.log('üéµ Current paused state:', this.videoElement.paused);
    if (this.videoElement.paused) {
      console.log('‚ñ∂Ô∏è Playing video');
      this.videoElement.play();
    } else {
      console.log('‚è∏Ô∏è Pausing video');
      this.videoElement.pause();
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private setupControlsEvents(
    playButton: HTMLElement, 
    timeInfo: HTMLElement, 
    progressContainer: HTMLElement, 
    volumeButton: HTMLElement, 
    fullscreenButton: HTMLElement
  ) {
    // –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if (playButton) {
      playButton.addEventListener('click', () => {
        this.togglePlayPause();
      });
    }

    // –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (progressContainer) {
      progressContainer.addEventListener('click', (e) => {
        if (!this.videoElement) return;
        const rect = progressContainer.getBoundingClientRect();
        const percent = (e.clientX - rect.left) / rect.width;
        this.videoElement.currentTime = percent * this.videoElement.duration;
      });
    }

    // –ì—Ä–æ–º–∫–æ—Å—Ç—å
    if (this.volumeSlider) {
      this.volumeSlider.addEventListener('input', (e) => {
        if (!this.videoElement) return;
        const target = e.target as HTMLInputElement;
        this.videoElement.volume = parseInt(target.value) / 100;
      });
    }

    if (volumeButton) {
      volumeButton.addEventListener('click', () => {
        this.toggleMute();
      });
    }

    // –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
    if (fullscreenButton) {
      fullscreenButton.addEventListener('click', () => {
        this.toggleFullscreen();
      });
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private showLoading() {
    if (this.loadingOverlay) {
      this.loadingOverlay.style.display = 'flex';
    }
  }

  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private hideLoading() {
    if (this.loadingOverlay) {
      this.loadingOverlay.style.display = 'none';
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private showCenterPlayButton() {
    if (this.centerPlayButton) {
      this.centerPlayButton.style.display = 'flex';
    }
  }

  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private hideCenterPlayButton() {
    if (this.centerPlayButton) {
      this.centerPlayButton.style.display = 'none';
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private updatePlayButton(isPaused: boolean) {
    const playButtons = document.querySelectorAll('.control-btn-play');
    playButtons.forEach(button => {
      button.innerHTML = isPaused ? `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M8 5v14l11-7z"/>
        </svg>
      ` : `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
        </svg>
      `;
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  private updateProgress() {
    if (!this.videoElement || !this.progressBar) return;
    
    const percent = (this.videoElement.currentTime / this.videoElement.duration) * 100;
    this.progressBar.style.width = `${percent}%`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    const timeInfo = document.querySelector('.custom-controls span') as HTMLElement;
    if (timeInfo) {
      const current = this.formatTime(this.videoElement.currentTime);
      const duration = this.formatTime(this.videoElement.duration);
      timeInfo.textContent = `${current} / ${duration}`;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ—Å—É –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private updateBuffered() {
    if (!this.videoElement || !this.bufferedBar) return;
    
    if (this.videoElement.buffered.length > 0) {
      const bufferedEnd = this.videoElement.buffered.end(this.videoElement.buffered.length - 1);
      const percent = (bufferedEnd / this.videoElement.duration) * 100;
      this.bufferedBar.style.width = `${percent}%`;
    }
  }

  /**
   * –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
   */
  private seekBy(seconds: number) {
    if (!this.videoElement) return;
    this.videoElement.currentTime = Math.max(0, Math.min(
      this.videoElement.duration, 
      this.videoElement.currentTime + seconds
    ));
  }

  /**
   * –†–µ–≥—É–ª–∏—Ä—É–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å
   */
  private adjustVolume(delta: number) {
    if (!this.videoElement) return;
    this.videoElement.volume = Math.max(0, Math.min(1, this.videoElement.volume + delta));
    
    if (this.volumeSlider) {
      this.volumeSlider.value = (this.videoElement.volume * 100).toString();
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
   */
  private toggleFullscreen() {
    if (!document.fullscreenElement) {
      this.videoElement?.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫
   */
  private toggleMute() {
    if (!this.videoElement) return;
    this.videoElement.muted = !this.videoElement.muted;
    
    const volumeButton = document.querySelector('.control-btn-volume');
    if (volumeButton) {
      volumeButton.innerHTML = this.videoElement.muted ? `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
        </svg>
      ` : `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/>
        </svg>
      `;
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—ã
   */
  private showControls() {
    if (this.customControls) {
      this.customControls.style.transform = 'translateY(0)';
      this.customControls.style.opacity = '1';
      this.customControls.style.pointerEvents = 'auto';
    }
  }

  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—ã
   */
  private hideControls() {
    if (this.customControls && !this.videoElement?.paused) {
      this.customControls.style.transform = 'translateY(100%)';
      this.customControls.style.opacity = '0';
      this.customControls.style.pointerEvents = 'none';
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç mm:ss
   */
  private formatTime(seconds: number): string {
    if (isNaN(seconds)) return '00:00';
    
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
   */
  private async loadVideo() {
    if (!this.videoElement || !this.currentTranslation) return;

    console.log('üîÑ Loading video for episode:', this.currentEpisode);

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
      this.updateAnimeInfoForCurrentEpisode();

      // –û–±–Ω–æ–≤–ª—è–µ–º poster –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
      await this.createVideoPoster();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      await this.checkAndOfferProgressResume();

      console.log('üîç Getting real video URL from Kodik...');
      
      // –°—Ç—Ä–æ–∏–º URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
      const episodeUrl = `https://kodik.info/serial/${this.currentTranslation.mediaId}/${this.currentTranslation.mediaHash}/720p?min_age=16&first_url=false&season=1&episode=${this.currentEpisode}`;
      console.log('üì∫ Episode URL:', episodeUrl);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º background script –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
      const response = await this.fetchViaBackground(episodeUrl);
      if (!response.success) {
        throw new Error(`Failed to fetch episode page: ${response.error}`);
      }
      
      const html = response.data;
      if (!html) {
        throw new Error('Empty response from episode page');
      }
      
      console.log('üìÑ HTML response length:', html.length);
      console.log('üìÑ HTML preview:', html.substring(0, 500));
      
      // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ urlParams
      let urlParams;
      
      // –í–∞—Ä–∏–∞–Ω—Ç 1: urlParams = '{"json":"string"}';
      let urlParamsMatch = html.match(/urlParams = '([^']+)';/);
      if (urlParamsMatch) {
        console.log('‚úÖ Found urlParams variant 1 (string)');
        urlParams = JSON.parse(urlParamsMatch[1]);
      } else {
        // –í–∞—Ä–∏–∞–Ω—Ç 2: urlParams = {...};
        urlParamsMatch = html.match(/urlParams = ({[^;]+});/);
        if (urlParamsMatch) {
          console.log('‚úÖ Found urlParams variant 2 (object)');
          urlParams = JSON.parse(urlParamsMatch[1]);
        } else {
          // –í–∞—Ä–∏–∞–Ω—Ç 3: urlParams='{"json":"string"}';
          urlParamsMatch = html.match(/urlParams='([^']+)';/);
          if (urlParamsMatch) {
            console.log('‚úÖ Found urlParams variant 3 (string no space)');
            urlParams = JSON.parse(urlParamsMatch[1]);
          } else {
            // –í–∞—Ä–∏–∞–Ω—Ç 4: var urlParams = {...}
            urlParamsMatch = html.match(/var urlParams = ({[^;]+});/);
            if (urlParamsMatch) {
              console.log('‚úÖ Found urlParams variant 4 (var object)');
              urlParams = JSON.parse(urlParamsMatch[1]);
            } else {
              // –ü–æ–∏—â–µ–º –≤—Å–µ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç urlParams
              const allMatches = html.match(/urlParams[^{'"]*[{'"'][^}'"]+[}'"]/g);
              console.log('üîç All urlParams matches:', allMatches);
              
              throw new Error('Could not find urlParams in page');
            }
          }
        }
      }
      
      if (!urlParams) {
        throw new Error('Could not parse urlParams');
      }
      
      console.log('üîß URL Params:', urlParams);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º video –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
      const videoTypeMatch = html.match(/\.type = '([^']+)'/);
      const videoHashMatch = html.match(/\.hash = '([^']+)'/);
      const videoIdMatch = html.match(/\.id = '([^']+)'/);
      
      console.log('üîç Video type match:', videoTypeMatch);
      console.log('üîç Video hash match:', videoHashMatch);
      console.log('üîç Video id match:', videoIdMatch);
      
      if (!videoTypeMatch || !videoHashMatch || !videoIdMatch) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const altTypeMatch = html.match(/type:\s*'([^']+)'/);
        const altHashMatch = html.match(/hash:\s*'([^']+)'/);
        const altIdMatch = html.match(/id:\s*'([^']+)'/);
        
        console.log('üîç Alt type match:', altTypeMatch);
        console.log('üîç Alt hash match:', altHashMatch);
        console.log('üîç Alt id match:', altIdMatch);
        
        if (!altTypeMatch || !altHashMatch || !altIdMatch) {
          // –í—ã–≤–µ–¥–µ–º —á–∞—Å—Ç—å HTML –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          const scriptTags = html.match(/<script[^>]*>[\s\S]*?<\/script>/g);
          console.log('üìú All script tags count:', scriptTags?.length);
          if (scriptTags && scriptTags.length > 0) {
            scriptTags.forEach((script, index) => {
              if (script.includes('type') || script.includes('hash') || script.includes('id')) {
                console.log(`üìú Script ${index} with params:`, script.substring(0, 300));
              }
            });
          }
          
          throw new Error('Could not extract video parameters');
        }
        
        var videoType = altTypeMatch[1];
        var videoHash = altHashMatch[1];
        var videoId = altIdMatch[1];
      } else {
        var videoType = videoTypeMatch[1];
        var videoHash = videoHashMatch[1];
        var videoId = videoIdMatch[1];
      }
      
      console.log('üé¨ Video params:', { videoType, videoHash, videoId });
      
      // –ù–∞—Ö–æ–¥–∏–º script URL –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞ (—Ä–µ–ø–ª–∏—Ü–∏—Ä—É–µ–º Python –ª–æ–≥–∏–∫—É)
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∏ –±–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è script URL
      const allScriptMatches = html.match(/<script[^>]*>/g);
      if (!allScriptMatches || allScriptMatches.length < 1) {
        console.log('üîç All script tags found:', allScriptMatches);
        throw new Error('Could not find script tags');
      }
      
      console.log('üîç All script tags found:', allScriptMatches);
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å src (—ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π app.js)
      let scriptUrl = null;
      for (let i = 0; i < allScriptMatches.length; i++) {
        const script = allScriptMatches[i];
        const scriptSrcMatch = script.match(/src=['"]([^'"]+)['"]/);
        if (scriptSrcMatch && !scriptSrcMatch[1].includes('adsbygoogle')) {
          scriptUrl = scriptSrcMatch[1];
          console.log(`ÔøΩ Found script URL at index ${i}:`, scriptUrl);
          break;
        }
      }
      
      if (!scriptUrl) {
        throw new Error('Could not find main script URL');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º post link –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
      const scriptResponse = await this.fetchViaBackground('https://kodik.info' + scriptUrl);
      if (!scriptResponse.success) {
        throw new Error(`Failed to fetch script: ${scriptResponse.error}`);
      }
      
      const scriptContent = scriptResponse.data;
      if (!scriptContent) {
        throw new Error('Empty response from script');
      }
      
      // –ò—â–µ–º POST endpoint –≤ —Å–∫—Ä–∏–ø—Ç–µ (—Ä–µ–ø–ª–∏—Ü–∏—Ä—É–µ–º Python –ª–æ–≥–∏–∫—É)
      // Python: url = data[data.find("$.ajax") + 30 : data.find("cache:!1") - 3]
      const ajaxIndex = scriptContent.indexOf("$.ajax");
      if (ajaxIndex === -1) {
        console.log('üîç Script content preview:', scriptContent.substring(0, 500));
        throw new Error('Could not find $.ajax in script');
      }
      
      const cacheIndex = scriptContent.indexOf("cache:!1");
      if (cacheIndex === -1) {
        console.log('üîç Script content preview:', scriptContent.substring(0, 500));
        throw new Error('Could not find cache:!1 in script');
      }
      
      const base64Url = scriptContent.substring(ajaxIndex + 30, cacheIndex - 3);
      console.log('üîç Base64 URL extracted:', base64Url);
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ POST URL
      let postLink;
      try {
        postLink = atob(base64Url);
        console.log('üîó Decoded post link:', postLink);
      } catch (error) {
        console.log('‚ùå Failed to decode base64:', base64Url);
        throw new Error('Could not decode base64 post link');
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
      const postData = {
        hash: videoHash,
        id: videoId,
        type: videoType,
        d: urlParams.d,
        d_sign: urlParams.d_sign,
        pd: urlParams.pd,
        pd_sign: urlParams.pd_sign,
        ref: '',
        ref_sign: urlParams.ref_sign,
        bad_user: 'true',
        cdn_is_working: 'true'
      };
      
      // –î–µ–ª–∞–µ–º POST –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ background script
      const postResponse = await this.postViaBackground(`https://kodik.info${postLink}`, postData);
      if (!postResponse.success) {
        throw new Error(`Failed to get video data: ${postResponse.error}`);
      }
      
      const videoData = postResponse.data;
      console.log('üéØ Video data:', videoData);
      
      if (!videoData.links || Object.keys(videoData.links).length === 0) {
        throw new Error('No video links found in response');
      }
      
      const maxQuality = Math.max(...Object.keys(videoData.links).map(Number));
      
      if (!videoData.links[maxQuality] || !videoData.links[maxQuality][0]) {
        throw new Error('No video URL found for max quality: ' + maxQuality);
      }
      
      const videoUrl = videoData.links[maxQuality][0].src;
      
      console.log('‚úÖ Got video URL:', videoUrl);
      console.log('üìä Max quality:', maxQuality);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å URL (—Ä–µ–ø–ª–∏—Ü–∏—Ä—É–µ–º Python –ª–æ–≥–∏–∫—É)
      let finalVideoUrl = videoUrl;
      if (!videoUrl.includes('mp4:hls:manifest')) {
        console.log('üîì Decrypting video URL...');
        finalVideoUrl = this.convertKodikUrl(videoUrl);
        console.log('üîì Decrypted URL:', finalVideoUrl);
      } else {
        console.log('‚úÖ URL already contains mp4:hls:manifest, no decryption needed');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HLS.js
      if (typeof window.Hls !== 'undefined' && window.Hls.isSupported()) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º HLS.js
        if (this.hlsPlayer) {
          this.hlsPlayer.destroy();
        }

        this.hlsPlayer = new window.Hls({
          debug: false,
          enableWorker: true,
          lowLatencyMode: false,
          maxMaxBufferLength: 30
        });

        this.hlsPlayer.loadSource(finalVideoUrl);
        this.hlsPlayer.attachMedia(this.videoElement);

        this.hlsPlayer.on(window.Hls.Events.MANIFEST_PARSED, () => {
          console.log('‚úÖ HLS manifest loaded');
        });

        this.hlsPlayer.on(window.Hls.Events.ERROR, (event: any, data: any) => {
          console.error('‚ùå HLS error:', data);
          
          // –ü—Ä–æ–±—É–µ–º fallback - –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
          if (data.fatal) {
            console.log('üîÑ Trying direct video loading...');
            this.videoElement!.src = finalVideoUrl;
          }
        });

      } else if (this.videoElement.canPlayType('application/vnd.apple.mpegurl')) {
        // –ü—Ä—è–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ HLS (Safari)
        this.videoElement.src = finalVideoUrl;
      } else {
        console.warn('‚ö†Ô∏è HLS not supported, trying direct loading');
        this.videoElement.src = finalVideoUrl;
      }

    } catch (error) {
      console.error('‚ùå Failed to load video:', error);
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥
   */
  private async switchTranslation(translation: Translation) {
    console.log('üîÑ Switching translation to:', translation.title);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.stopProgressTracking();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    await this.saveCurrentProgress();
    
    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ —É–∂–µ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –≤—Ä—É—á–Ω—É—é)
    this.isFirstLoad = false;
    
    this.currentTranslation = translation;
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —ç–ø–∏–∑–æ–¥ –Ω–∞ 1 - –ø—É—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ
    this.updateAnimeInfoForCurrentEpisode();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const translationButtons = this.playerContainer?.querySelectorAll('.translation-btn');
    translationButtons?.forEach((btn, index) => {
      (btn as HTMLElement).style.background = 
        this.translations[index] === translation ? '#007bff' : '#333';
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    await this.loadEpisodes();
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ø–∏–∑–æ–¥–æ–≤
    const oldEpisodeSelector = this.playerContainer?.querySelector('.episode-selector');
    if (oldEpisodeSelector) {
      oldEpisodeSelector.remove();
      this.createEpisodeSelector();
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ (–ø—Ä–æ–≥—Ä–µ—Å—Å –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ isFirstLoad = false)
    await this.loadVideo();
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —ç–ø–∏–∑–æ–¥
   */
  private async switchEpisode(episodeNumber: number) {
    console.log('üîÑ Switching to episode:', episodeNumber);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.stopProgressTracking();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    await this.saveCurrentProgress();
    
    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ —É–∂–µ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –≤—Ä—É—á–Ω—É—é)
    this.isFirstLoad = false;
    
    this.currentEpisode = episodeNumber;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ
    this.updateAnimeInfoForCurrentEpisode();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–ø–∏–∑–æ–¥–æ–≤
    const episodeButtons = this.playerContainer?.querySelectorAll('.episode-btn');
    episodeButtons?.forEach(btn => {
      const btnEpisode = parseInt(btn.textContent || '0');
      (btn as HTMLElement).style.background = 
        btnEpisode === episodeNumber ? '#007bff' : '#444';
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ (–ø—Ä–æ–≥—Ä–µ—Å—Å –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ isFirstLoad = false)
    await this.loadVideo();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ MM:SS
   */

  /**
   * GET –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ background script –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
   */
  private async fetchViaBackground(url: string, timeout: number = 30000): Promise<{ success: boolean; data?: string; error?: string }> {
    return new Promise((resolve) => {
      const timeoutId = setTimeout(() => {
        resolve({ success: false, error: 'Request timeout' });
      }, timeout);

      chrome.runtime.sendMessage({
        type: 'FETCH_KODIK_PAGE',
        url: url
      }, (response) => {
        clearTimeout(timeoutId);
        resolve(response);
      });
    });
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ background script –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
   */
  private async postViaBackground(url: string, data: any, timeout: number = 30000): Promise<{ success: boolean; data?: any; error?: string }> {
    return new Promise((resolve) => {
      const timeoutId = setTimeout(() => {
        resolve({ success: false, error: 'Request timeout' });
      }, timeout);

      chrome.runtime.sendMessage({
        type: 'FETCH_KODIK_POST',
        url: url,
        data: data
      }, (response) => {
        clearTimeout(timeoutId);
        resolve(response);
      });
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL (—Ä–µ–ø–ª–∏—Ü–∏—Ä—É—é—Ç Python –ª–æ–≥–∏–∫—É)
  private convertChar(char: string, num: number): string {
    const isLower = char === char.toLowerCase();
    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const upperChar = char.toUpperCase();
    
    if (alphabet.includes(upperChar)) {
      const index = alphabet.indexOf(upperChar);
      const newIndex = (index + num) % alphabet.length;
      const newChar = alphabet[newIndex];
      return isLower ? newChar.toLowerCase() : newChar;
    } else {
      return char;
    }
  }

  convertKodikUrl(encryptedUrl: string): string {
    console.log('üîì Starting URL decryption for:', encryptedUrl.substring(0, 50) + '...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–¥–≤–∏–≥–∏ ROT (0-25)
    for (let rot = 0; rot < 26; rot++) {
      try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º Caesar cipher —Å —Ç–µ–∫—É—â–∏–º —Å–¥–≤–∏–≥–æ–º
        const decryptedChars = encryptedUrl.split('').map(char => this.convertChar(char, rot));
        let decryptedUrl = decryptedChars.join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º padding –¥–ª—è base64 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const padding = (4 - (decryptedUrl.length % 4)) % 4;
        decryptedUrl += '='.repeat(padding);
        
        // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ base64
        const decodedUrl = atob(decryptedUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
        if (decodedUrl.includes('mp4:hls:manifest')) {
          console.log(`üîì Successfully decrypted with ROT${rot}: ${decodedUrl.substring(0, 100)}...`);
          return decodedUrl;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–¥–≤–∏–≥
        continue;
      }
    }
    
    console.log('‚ùå Could not decrypt URL, returning original');
    throw new Error('Decryption failed - could not find valid mp4:hls:manifest URL');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
function waitForDOM(): Promise<void> {
  return new Promise((resolve) => {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => resolve());
    } else {
      resolve();
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function waitForElements(selectors: string[], timeout: number = 10000): Promise<void> {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    function checkElements() {
      const allFound = selectors.every(selector => document.querySelector(selector));
      
      if (allFound) {
        console.log('‚úÖ All required elements found:', selectors);
        resolve();
      } else if (Date.now() - startTime > timeout) {
        console.log('‚ö†Ô∏è Timeout waiting for elements:', selectors);
        resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
      } else {
        setTimeout(checkElements, 100);
      }
    }
    
    checkElements();
  });
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
async function initializeExtension() {
  try {
    console.log('‚è≥ Waiting for DOM to be ready...');
    await waitForDOM();
    
    console.log('‚è≥ Waiting for page elements to load...');
    await waitForElements([
      '.b-translators__list, #translators-list',
      '.pmovie__player, .tabs-block__content, #kodik-tab-player'
    ], 15000);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    console.log('‚è≥ Additional wait for dynamic content...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üöÄ Starting extension initialization...');
    const optimizer = new AnimeStarsKodikOptimizer();
    await optimizer.init();
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    (window as any).animeStarsOptimizer = optimizer;
    
  } catch (error) {
    console.error('‚ùå Extension initialization failed:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
initializeExtension();
