// –ë—ã—Å—Ç—Ä—ã–π –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã Kodik iframe
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HLS.js –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

import { AnimeStarsPlayerData } from '../types/kodik';
import { HLSParser, HLSUtils } from '../utils/hls-parser';

export interface FastPlayerConfig {
  container: HTMLElement;
  videoUrl: string;
  maxQuality: number;
  playerData: AnimeStarsPlayerData | null;
  originalUrl: string;
}

export class FastVideoPlayer {
  private config: FastPlayerConfig;
  private videoElement: HTMLVideoElement | null = null;
  private hlsPlayer: any = null; // HLS.js instance
  private controlsContainer: HTMLElement | null = null;
  private isInitialized = false;
  private isPlaying = false;

  constructor(config: FastPlayerConfig) {
    this.config = config;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–µ–µ—Ä
   */
  async init(): Promise<void> {
    if (this.isInitialized) return;

    try {
      console.log('üéÆ Initializing fast video player...');

      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      this.clearContainer();

      // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
      this.createVideoElement();

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
      this.createControls();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HLS
      await this.initializeHLS();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();

      this.isInitialized = true;
      console.log('‚úÖ Fast video player initialized');

    } catch (error) {
      console.error('‚ùå Failed to initialize fast player:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   */
  private clearContainer(): void {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ iframe –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const existingElements = this.config.container.querySelectorAll('iframe, video, embed, object');
    existingElements.forEach(el => el.remove());

    // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingElements = this.config.container.querySelectorAll('.animestars-loading, .animestars-error');
    loadingElements.forEach(el => el.remove());
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
   */
  private createVideoElement(): void {
    this.videoElement = document.createElement('video');
    this.videoElement.style.cssText = `
      width: 100%;
      height: 100%;
      background: #000;
      object-fit: contain;
    `;
    
    this.videoElement.setAttribute('controls', 'true');
    this.videoElement.setAttribute('preload', 'metadata');
    this.videoElement.setAttribute('crossorigin', 'anonymous');

    this.config.container.appendChild(this.videoElement);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
   */
  private createControls(): void {
    this.controlsContainer = document.createElement('div');
    this.controlsContainer.className = 'fast-player-controls';
    this.controlsContainer.style.cssText = `
      position: absolute;
      top: 10px;
      right: 10px;
      display: flex;
      gap: 5px;
      z-index: 1000;
    `;

    // –ö–Ω–æ–ø–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    const qualityButton = this.createControlButton(
      `${this.config.maxQuality}p`,
      '–¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ'
    );
    qualityButton.onclick = () => this.showQualityMenu();

    // –ö–Ω–æ–ø–∫–∞ PiP
    const pipButton = this.createControlButton('‚ßâ', '–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –∫–∞—Ä—Ç–∏–Ω–∫–µ');
    pipButton.onclick = () => this.togglePictureInPicture();

    // –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    const fullscreenButton = this.createControlButton('‚õ∂', '–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω');
    fullscreenButton.onclick = () => this.toggleFullscreen();

    this.controlsContainer.appendChild(qualityButton);
    this.controlsContainer.appendChild(pipButton);
    this.controlsContainer.appendChild(fullscreenButton);

    this.config.container.style.position = 'relative';
    this.config.container.appendChild(this.controlsContainer);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç—Ä–æ–ª–∞
   */
  private createControlButton(text: string, title: string): HTMLButtonElement {
    const button = document.createElement('button');
    button.textContent = text;
    button.title = title;
    button.style.cssText = `
      background: rgba(0, 0, 0, 0.7);
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
      font-family: monospace;
      transition: background 0.2s;
    `;

    button.onmouseenter = () => {
      button.style.background = 'rgba(0, 0, 0, 0.9)';
    };

    button.onmouseleave = () => {
      button.style.background = 'rgba(0, 0, 0, 0.7)';
    };

    return button;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç HLS –ø–ª–µ–µ—Ä
   */
  private async initializeHLS(): Promise<void> {
    if (!this.videoElement) {
      throw new Error('Video element not created');
    }

    try {
      console.log('üé¨ Initializing video with URL:', this.config.videoUrl);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL
      const isHLS = this.config.videoUrl.includes('.m3u8');
      const isKodikIframe = this.config.videoUrl.includes('kodik.info');
      
      if (isKodikIframe) {
        console.log('üñºÔ∏è URL is Kodik iframe, creating fallback player');
        await this.createKodikFallbackPlayer();
        return;
      }
      
      if (isHLS) {
        console.log('üì∫ URL is HLS stream');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HLS –±—Ä–∞—É–∑–µ—Ä–æ–º
        if (this.videoElement.canPlayType('application/vnd.apple.mpegurl')) {
          // –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ HLS (Safari)
          this.videoElement.src = this.config.videoUrl;
          console.log('‚úÖ Using native HLS support');
        } else {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º HLS.js –¥–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
          await this.loadHLSjs();
        }
      } else {
        console.log('üé• URL is regular video');
        // –û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
        this.videoElement.src = this.config.videoUrl;
      }

    } catch (error) {
      console.error('‚ùå Error initializing video:', error);
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - iframe
      await this.createKodikFallbackPlayer();
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç fallback –ø–ª–µ–µ—Ä —Å iframe –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
   */
  private async createKodikFallbackPlayer(): Promise<void> {
    if (!this.videoElement) return;
    
    console.log('üîÑ Creating Kodik fallback player');
    
    // –£–±–∏—Ä–∞–µ–º video —ç–ª–µ–º–µ–Ω—Ç
    this.videoElement.remove();
    this.videoElement = null;
    
    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π iframe
    const iframe = document.createElement('iframe');
    iframe.src = this.config.originalUrl;
    iframe.style.cssText = `
      width: 100%;
      height: 100%;
      border: none;
      background: #000;
    `;
    iframe.setAttribute('allowfullscreen', 'true');
    iframe.setAttribute('webkitallowfullscreen', 'true');
    iframe.setAttribute('mozallowfullscreen', 'true');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á—Ç–æ —ç—Ç–æ fallback
    const indicator = document.createElement('div');
    indicator.style.cssText = `
      position: absolute;
      top: 10px;
      left: 10px;
      background: rgba(255, 107, 53, 0.9);
      color: white;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 1001;
      font-family: Arial, sans-serif;
    `;
    indicator.textContent = '–†–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏';
    
    this.config.container.appendChild(iframe);
    this.config.container.appendChild(indicator);
    
    console.log('‚úÖ Fallback player created');
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç HLS.js
   */
  private async loadHLSjs(): Promise<void> {
    if (!this.videoElement) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ HLS.js –≥–ª–æ–±–∞–ª—å–Ω–æ
      if (typeof (window as any).Hls !== 'undefined') {
        this.initHLSjsPlayer((window as any).Hls);
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º HLS.js –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/hls.js@latest';
      
      await new Promise<void>((resolve, reject) => {
        script.onload = () => resolve();
        script.onerror = () => reject(new Error('Failed to load HLS.js'));
        document.head.appendChild(script);
      });

      this.initHLSjsPlayer((window as any).Hls);

    } catch (error) {
      console.error('Failed to load HLS.js:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç HLS.js –ø–ª–µ–µ—Ä
   */
  private initHLSjsPlayer(Hls: any): void {
    if (!this.videoElement) return;

    if (Hls.isSupported()) {
      this.hlsPlayer = new Hls({
        enableWorker: true,
        lowLatencyMode: false,
        backBufferLength: 30
      });

      this.hlsPlayer.loadSource(this.config.videoUrl);
      this.hlsPlayer.attachMedia(this.videoElement);

      this.hlsPlayer.on(Hls.Events.MANIFEST_PARSED, () => {
        console.log('HLS manifest parsed successfully');
      });

      this.hlsPlayer.on(Hls.Events.ERROR, (event: any, data: any) => {
        console.error('HLS error:', data);
        if (data.fatal) {
          this.handleHLSError(data);
        }
      });

      console.log('HLS.js player initialized');
    } else {
      throw new Error('HLS.js not supported');
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ HLS
   */
  private handleHLSError(data: any): void {
    if (!this.hlsPlayer || !this.videoElement) return;

    switch (data.type) {
      case 'networkError':
        console.log('Network error, trying to recover...');
        this.hlsPlayer.startLoad();
        break;
      case 'mediaError':
        console.log('Media error, trying to recover...');
        this.hlsPlayer.recoverMediaError();
        break;
      default:
        console.error('Fatal HLS error, cannot recover');
        this.destroy();
        break;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    if (!this.videoElement) return;

    this.videoElement.addEventListener('play', () => {
      this.isPlaying = true;
    });

    this.videoElement.addEventListener('pause', () => {
      this.isPlaying = false;
    });

    this.videoElement.addEventListener('loadstart', () => {
      console.log('Video loading started');
    });

    this.videoElement.addEventListener('canplay', () => {
      console.log('Video can start playing');
    });

    this.videoElement.addEventListener('error', (e) => {
      console.error('Video error:', e);
    });
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  private showQualityMenu(): void {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –∫–∞—á–µ—Å—Ç–≤–∞
    console.log('Quality menu not implemented yet');
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º "–∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –∫–∞—Ä—Ç–∏–Ω–∫–µ"
   */
  private async togglePictureInPicture(): Promise<void> {
    if (!this.videoElement) return;

    try {
      if (document.pictureInPictureElement) {
        await document.exitPictureInPicture();
      } else {
        await this.videoElement.requestPictureInPicture();
      }
    } catch (error) {
      console.error('PiP error:', error);
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
   */
  private toggleFullscreen(): void {
    if (!this.videoElement) return;

    if (document.fullscreenElement) {
      document.exitFullscreen();
    } else {
      this.videoElement.requestFullscreen();
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ
   */
  toggle(): void {
    if (!this.videoElement) return;

    if (this.isPlaying) {
      this.videoElement.pause();
    } else {
      this.videoElement.play();
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–∏–¥–µ–æ
   */
  play(): void {
    if (this.videoElement) {
      this.videoElement.play();
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ
   */
  pause(): void {
    if (this.videoElement) {
      this.videoElement.pause();
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  seekTo(time: number): void {
    if (this.videoElement) {
      this.videoElement.currentTime = time;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  getCurrentTime(): number {
    return this.videoElement?.currentTime || 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
   */
  getDuration(): number {
    return this.videoElement?.duration || 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–ª–µ–µ—Ä
   */
  isReady(): boolean {
    return this.isInitialized && !!this.videoElement;
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –ø–ª–µ–µ—Ä –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
   */
  destroy(): void {
    console.log('üóëÔ∏è Destroying fast video player...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HLS –ø–ª–µ–µ—Ä
    if (this.hlsPlayer) {
      this.hlsPlayer.destroy();
      this.hlsPlayer = null;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    if (this.videoElement) {
      this.videoElement.pause();
      this.videoElement.src = '';
      this.videoElement.load();
      this.videoElement.remove();
      this.videoElement = null;
    }

    // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
    if (this.controlsContainer) {
      this.controlsContainer.remove();
      this.controlsContainer = null;
    }

    this.isInitialized = false;
    this.isPlaying = false;

    console.log('‚úÖ Fast video player destroyed');
  }
}
